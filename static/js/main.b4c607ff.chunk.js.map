{"version":3,"sources":["components/HospitalMap.js","App.js","serviceWorker.js","index.js"],"names":["hospitalIcon","Icon","iconUrl","iconSize","HospitalMap","state","lat","lng","zoom","activeHospital","hospital","this","setState","Map","center","TileLayer","url","attribution","props","locations","default","hospitals","map","index","Marker","key","position","geometry","coordinates","latitude","longitude","onclick","setActiveHospital","icon","Popup","name","contact","address","telephone","Component","App","hospitalLocations","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qxCAIMA,EAAe,I,KAAIC,MAAK,CAC1BC,QAAS,oDACTC,SAAU,CAAC,GAAI,MAGEC,E,kDACjB,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,IAAK,QACLC,IAAK,QACLC,KAAM,GACNC,eAAgB,MANV,E,8DAUIC,GACdC,KAAKC,SAAS,CACVH,eAAgBC,M,+BAGd,IAAD,OACL,OACI,kBAACG,EAAA,EAAD,CAAKC,OAAQ,CAACH,KAAKN,MAAMC,IAAKK,KAAKN,MAAME,KAAMC,KAAMG,KAAKN,MAAMG,MAC5D,kBAACO,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAEfN,KAAKO,MAAMC,UAAUC,QAAQC,UAAUC,KAAI,SAACZ,EAAUa,GAAX,OACxC,kBAACC,EAAA,EAAD,CACIC,IAAKF,EACLG,SAAU,CAAChB,EAASiB,SAASC,YAAYC,SAAUnB,EAASiB,SAASC,YAAYE,WACjFC,QAAS,WACL,EAAKC,kBAAkBtB,IAE3BuB,KAAMjC,GAEL,EAAKK,MAAMI,gBACP,kBAACyB,EAAA,EAAD,CACGR,SAAU,CACN,EAAKrB,MAAMI,eAAekB,SAASC,YAAYC,SAC/C,EAAKxB,MAAMI,eAAekB,SAASC,YAAYE,YAGnD,6BACI,4BAAK,EAAKzB,MAAMI,eAAe0B,MAC/B,2BACI,4CAAyB,6BACxB,EAAK9B,MAAMI,eAAe2B,QAAQC,SAEvC,2BACI,8CAA2B,6BAC1B,EAAKhC,MAAMI,eAAe2B,QAAQE,sB,GA/ClCC,a,mBCU1BC,G,kNAbbnC,MAAQ,CACNc,UAAWsB,G,uDAGX,OACE,yBAAKC,UAAU,kBACb,gDACA,kBAAC,EAAD,CAAavB,UAAWR,KAAKN,MAAMc,iB,GARzBoB,cCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b4c607ff.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\n\nconst hospitalIcon = new Icon({\n    iconUrl: \"https://image.flaticon.com/icons/svg/69/69658.svg\",\n    iconSize: [25, 25]\n});\n\nexport default class HospitalMap extends Component {\n    constructor() {\n        super();\n        this.state = {\n            lat: 55.6761,\n            lng: 12.5683,\n            zoom: 11,\n            activeHospital: null,\n        };\n    }\n\n    setActiveHospital(hospital) {\n        this.setState({\n            activeHospital: hospital,\n        });\n    }\n    render() {\n        return (\n            <Map center={[this.state.lat, this.state.lng]} zoom={this.state.zoom}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {this.props.locations.default.hospitals.map((hospital, index) => (\n                    <Marker \n                        key={index} \n                        position={[hospital.geometry.coordinates.latitude, hospital.geometry.coordinates.longitude]}\n                        onclick={() => {\n                            this.setActiveHospital(hospital);\n                        }}\n                        icon={hospitalIcon}\n                    >\n                        {this.state.activeHospital &&\n                            (<Popup\n                                position={[\n                                    this.state.activeHospital.geometry.coordinates.latitude, \n                                    this.state.activeHospital.geometry.coordinates.longitude\n                                ]}\n                            >\n                                <div>\n                                    <h2>{this.state.activeHospital.name}</h2>\n                                    <p>\n                                        <strong>Address:</strong><br/>\n                                        {this.state.activeHospital.contact.address}\n                                    </p>\n                                    <p>\n                                        <strong>Telephone:</strong><br/>\n                                        {this.state.activeHospital.contact.telephone}\n                                    </p>\n                                </div>\n                            </Popup>)\n                        }\n                    </Marker>\n                ))}\n\n                \n            </Map>\n        )\n    }\n }","import React, { Component } from 'react';\nimport HospitalMap from './components/HospitalMap';\nimport * as hospitalLocations from \"./data/hospital-locations.json\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    locations: hospitalLocations,\n  }\n  render() {\n    return (\n      <div className='app-background'>\n        <h1>Bed Availability</h1>\n        <HospitalMap locations={this.state.locations}></HospitalMap>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}