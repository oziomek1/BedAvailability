{"version":3,"sources":["components/header/Header.js","components/footer/Footer.js","data/colors.js","navigation/AppNav.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginTop","marginBottom","menuButton","marginRight","spacing","title","titleLink","color","Header","props","classes","AppBar","position","className","Toolbar","Typography","component","variant","align","noWrap","Link","underline","href","Button","startIcon","footer","backgroundColor","padding","textAlign","Footer","LazyHomePage","React","lazy","LazyInfoPage","AppNav","Container","maxWidth","Suspense","fallback","CircularProgress","exact","path","Component","createMuiTheme","palette","primary","main","secondary","error","info","success","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qaAUMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,SAAU,EACVC,UAAW,GACXC,aAAc,IAEhBC,WAAY,CACVC,YAAaN,EAAMO,QAAQ,IAE7BC,MAAO,CACLN,SAAU,GAEZO,UAAW,CACP,UAAW,CACPC,MAAO,gBAwCJC,MAnCf,SAAgBC,GACZ,IAAMC,EAAUf,IACRU,EAAUI,EAAVJ,MAER,OACI,kBAACM,EAAA,EAAD,CAAQC,SAAS,SAASC,UAAWH,EAAQZ,MACzC,kBAACgB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,UAAU,KACVC,QAAQ,KACRC,MAAM,OACNC,QAAM,EACNN,UAAWH,EAAQL,OACnB,kBAACe,EAAA,EAAD,CACIP,UAAWH,EAAQJ,UACnBe,UAAU,OACVd,MAAM,UACNe,KAAK,KACJjB,IAGT,kBAACkB,EAAA,EAAD,CACIN,QAAQ,YACRV,MAAM,YACNe,KAAK,QACLE,UAAW,kBAAC,IAAD,OAJf,WC9CV7B,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC4B,OAAQ,CACJC,gBCJiB,UDKjBC,QAAS9B,EAAMO,QAAQ,EAAG,GAC1BG,MAAO,UACPqB,UAAW,cAcJC,MAVf,WACI,IAAMnB,EAAUf,IAEhB,OACI,4BAAQkB,UAAWH,EAAQe,QACvB,iDERNK,EAAeC,IAAMC,MAAK,kBAAM,gCAChCC,EAAeF,IAAMC,MAAK,kBAAM,gCAwBvBE,E,uKAfP,OACI,kBAACC,EAAA,EAAD,CAAWtB,UAAU,iBAAiBuB,SAAS,MAC3C,kBAAC,EAAD,CAAQ/B,MAAM,aACd,8BACI,kBAAC,IAAMgC,SAAP,CAAgBC,SAAU,kBAACC,EAAA,EAAD,CAAkBhC,MAAM,eAC9C,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,IAAIzB,UAVxB,WACV,OACI,kBAACc,EAAD,SASQ,kBAAC,IAAD,CAAOW,KAAK,QAAQzB,UAAWiB,MAGvC,kBAAC,EAAD,W,GAhBKS,aCNf7C,G,MAAQ8C,YAAe,CAC3BC,QAAS,CACLC,QAAS,CACPC,KFPgB,WESlBC,UAAW,CACTD,KFZe,WEcjBE,MAAO,CACLF,KFfe,WEiBjBG,KAAM,CACJH,KFjBiB,WEmBnBI,QAAS,CACPJ,KFtBkB,eEuCXK,E,uKAVX,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAevD,MAAOA,GACpB,kBAAC,EAAD,Y,GALQ6C,aCfEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACLsB,QAAQtB,MAAMA,EAAMuB,c","file":"static/js/main.a882e2af.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      marginTop: 20,\n      marginBottom: 20,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    titleLink: {\n        \"&:hover\": {\n            color: \"#dedede\"\n        }\n    }\n  }));\n\nfunction Header(props) {\n    const classes = useStyles();\n    const { title } = props;\n\n    return (\n        <AppBar position=\"static\" className={classes.root}>\n            <Toolbar>\n                <Typography\n                    component=\"h2\"\n                    variant=\"h4\"\n                    align=\"left\"\n                    noWrap\n                    className={classes.title}>\n                    <Link\n                        className={classes.titleLink} \n                        underline=\"none\"\n                        color=\"inherit\" \n                        href=\"/\">\n                        {title}\n                    </Link>\n                </Typography>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    href=\"/info\"\n                    startIcon={<InfoIcon />}\n                >\n                    Info\n                </Button>\n                \n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport * as colors from '../../data/colors';\n\nconst useStyles = makeStyles(theme => ({\n    footer: {\n        backgroundColor: colors.darkGreen,\n        padding: theme.spacing(4, 0),\n        color: '#ffffff',\n        textAlign: 'center'\n    },\n}));\n\nfunction Footer() {\n    const classes = useStyles();\n\n    return (\n        <footer className={classes.footer}>\n            <h4>BedAvail @ 2020</h4>\n        </footer>\n    )\n}\n\nexport default Footer;","export const lightGreen = \"#afe1cd\";\nexport const darkRed = \"#d25470\";\nexport const darkGreen = \"#4c9d97\";\nexport const darkBlue = \"#3b4360\";\nexport const lightGray = \"#c0c0c0\";","import React, { Component } from 'react';\nimport { Route } from \"react-router-dom\";\nimport Container from '@material-ui/core/Container';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport './AppNav.css';\nimport Header from '../components/header/Header';\nimport Footer from '../components/footer/Footer';\n\n\nconst LazyHomePage = React.lazy(() => import('../components/home/Home'));\nconst LazyInfoPage = React.lazy(() => import('../components/info/Info'));\n\nclass AppNav extends Component {\n    render() {\n        const Main = (() => {\n            return (\n                <LazyHomePage/>\n            );\n        });\n        return (\n            <Container className=\"main-container\" maxWidth=\"lg\">\n                <Header title=\"BedAvail\"/>\n                <main>\n                    <React.Suspense fallback={<CircularProgress color=\"secondary\" />}>\n                        <Route exact path='/' component={Main} />\n                        <Route path='/info' component={LazyInfoPage}/>\n                    </React.Suspense>\n                </main>\n                <Footer/>\n            </Container>\n        )\n    }\n}\n\nexport default AppNav;","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport AppNav from './navigation/AppNav';\nimport * as colors from './data/colors';\nimport './App.css';\n\nconst theme = createMuiTheme({\n  palette: {\n      primary: {\n        main: colors.darkBlue\n      },\n      secondary: {\n        main: colors.darkRed\n      },\n      error: {\n        main: colors.darkRed\n      },\n      info: {\n        main: colors.darkGreen\n      },\n      success: {\n        main: colors.lightGreen\n      }\n  }\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <ThemeProvider theme={theme}>\n          <AppNav />\n        </ThemeProvider>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}